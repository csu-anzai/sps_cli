#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""

Adiniona novos registros nos arquivos de dados.

Usage:
    unb-tools ( join-alu-rel ) <target-folder> <output-txt-fname>
    unb-tools ( curric-process ) <target-curric-txt-file>
    unb-tools ( multi-curric-process ) <target-curric-folder>
    unb-tools ( sigra-hist-process ) <target-sigra-hist-txt-file>
    unb-tools ( multi-sigra-hist-process ) <target-multi-hist-zipfile>
    unb-tools ( join-csv-union ) <csv-file1> <csv-file2> <joint-col> <output-csv-fname)
    unb-tools ( join-csv-intersection ) <csv-file1> <csv-file2> <joint-col> <output-csv-fname)
    unb-tools ( cross-values ) <csv-file>
    unb-tools ( fill-csv-gaps) <csv-file> <ref-cols>
    unb-tools ( remove-lines-from-csv ) 


Options:
    --version

Observações:

"""


import getpass
import os

from docopt import docopt
from subprocess import getoutput
from modulos.py_data_tools import make_complete_stat_from_csv
from modulos.py_unb_tools import *
from modulos.py_console_tools_v0 import save_json, render_form_get_values, select_op, select_ops, load_json

args = docopt(__doc__)

def main():
    if args['usr'] or args['usuario']:
        pass

    elif args['tag'] or args['marcador']:
        pass

    elif args['tgr'] or args['nfo-tag-replace']:
        if getoutput("whoami") != 'root':
            print("Este comando só pode ser executado pelo usuário 'root'...")
        else:
            substituir_marcadores(args["<valor-antigo>"], args["<valor-novo>"])

    elif args['atd'] or args['atendimento']:
        save_target_info(args['<identificador>'])
        atd_t = novo_atendimento(args['<identificador>'])
        if atd_t == "Encaminhamento de pedido de auxílio emergencial":
            numero_sei = novo_processo(args['<identificador>'], atd_t)
            if automail:
                os.system("novo nfo-atd '{}' '{}' '{}' '{}'".format(args["<identificador>"], "Atendimento via e-mail", "Envio de número de processo", "Verificar status de envio de email..."))
                os.system('echo "{numero_sei}" | sendeml get "$(target get eml)" "Assistência Estudantil - Processo de Auxílio Emergencial" "Segue o número do processo para acompanhamento do resultado. Com este número você pode consultar o resultado com qualquer pessoa do SPS que possua acesso ao SEI."'.format(numero_sei=numero_sei))

        elif atd_t == "Solicitação de acesso extraordinário ao RU":
            numero_sei = novo_processo(args['<identificador>'], atd_t)
            if automail:
                os.system('echo "{numero_sei}" | sendeml get "$(target get eml)" "Assistência Estudantil - Processo de Acesso ao RU" "Segue o número do processo para que você possa acompanhar do resultado. Com este número você pode consultar o resultado junto a qualquer pessoa do SPS que possua acesso ao SEI."'.format(numero_sei=numero_sei))
                os.system("novo nfo-atd '{}' '{}' '{}' '{}'".format(args["<identificador>"], "Atendimento via e-mail", "Envio de número de processo", "Verificar status de envio de email..."))

        elif atd_t == "Recebimento/digiralização de pedido de recurso ao resultado da avaliação socioeconômica":
            numero_sei = novo_processo(args['<identificador>'], atd_t)
            if automail:
                os.system('echo "{numero_sei}" | sendeml get "$(target get eml)" "Assistência Estudantil - Processo de Recurso à Avaliação Socioeconômica" "Segue o númro do processo de recurso. Se até a data prevista para o resultado você não obtiver resposta, vá ao SPS, forneça este número e informe a pendência."'.format(numero_sei=numero_sei))
                os.system("novo nfo-atd '{}' '{}' '{}' '{}'".format(args["<identificador>"], "Atendimento via e-mail", "Envio de número de processo", "Verificar status de envio de email..."))

    elif args['nfo-atd']:
        novo_atendimento_insert(args["<identificador>"], args["<forma_atd>"], args["<atd_t>"], args["<resultado>"])

    elif args['sei'] or args['processo']:
        novo_processo(args['<identificador>'], args['<assunto>'])

    elif args['est'] or args['estudo']:
        pass

    elif args['pro'] or args['profissional']:
        if getoutput('whoami') != 'root':
            print("Apenas o usuário 'root' pode adicionar outros profissionais...")
        else:
            novo_profissional()

    elif args['dbc'] or args['campo-db']:
        nova_coluna(args['<coluna>'], args['<arquivo_db>'], args['<lista-ops>'])

    elif args['dbi'] or args['inserir-form-info']:
        pass
        
        #if args['mesclado']:
        #    pass
        #elif args['aninhado']:
        #    pass

        #nova_coluna(args['<coluna>'], args['<arquivo_db>'], args['<lista-ops>'])


if __name__ == '__main__':
    cmd = main()
    newpid = os.fork()
    if newpid == 0:
        os.system("indexdb")