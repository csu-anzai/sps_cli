#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""

Cria ou recria arquivo de índices do banco de dados.

Usage:
    indexdb ( construir )
    indexdb ( inserir ) <identificador> <set_de_dados>
    indexdb ( sexo )

Options:
    --version

"""

import os
import asyncio

from docopt import docopt
from subprocess import getoutput
from python_modules.cli_global_paths import \
    pasta_de_dados,\
    arquivo_usuarios,\
    arquivo_processos,\
    arquivo_atendimentos,\
    arquivo_corrigidos,\
    arquivo_sex_info

from python_modules.cli_db_loader import \
    dados_usuarios,\
    dados_processos,\
    dados_atendimentos,\
    dados_corrigidos,\
    arquivo_index,\
    get_tags_idx

from python_modules.py_functions_json import save_json, load_json

from python_modules.cli_tools import amarelo, verde, input_op

args = docopt(__doc__)

def make_index_set(set_name, target_col, dados_brutos, pointer=None):
    #Pointer se refere ao campo/informação de retorno que será enviada, geralmente é usado quando uma referência é vinculada à outra
    index_set = {}
    index_set['set_de_dados'] = set_name
    index_set['dados'] = {}
    if set_name == 'tag' and target_col == 'marcador':
        index_set['dados'] = get_tags_idx(dados_brutos)

    else:
        for linha in dados_brutos:
            if pointer != None:
                if linha[target_col].find(',') != -1:
                    for sub_set in linha[target_col].split(','):
                        if index_set['dados'].get(sub_set.strip()) == None:
                            index_set['dados'][sub_set.strip()] = []
                        index_set['dados'][sub_set.strip()].append(linha[pointer])
                else:
                    if index_set['dados'].get(linha[target_col]) == None:
                        index_set['dados'][linha[target_col]] = []
                    index_set['dados'][linha[target_col]].append(linha[pointer])
            else:
                if index_set['dados'].get(linha[target_col]) == None:
                    index_set['dados'][linha[target_col]] = []
                index_set['dados'][linha[target_col]].append(dados_brutos.index(linha))
    return index_set



def make_search_set(dados_brutos):
    index_set = {}
    index_set['set_de_dados'] = 'nome'
    index_set['dados'] = {}
    for linha in dados_brutos:
        for palavra in linha['nome'].split(' '):
            if index_set['dados'].get(palavra[0]) == None:
                index_set['dados'][palavra[0]] = {}
            if index_set['dados'][palavra[0]].get(palavra) == None:
                index_set['dados'][palavra[0]][palavra] = []
            index_set['dados'][palavra[0]][palavra].append(dados_brutos.index(linha))
    return index_set

            
async def make_index_set_async(set_name, target_col, dados_brutos, pointer=None):
    return make_index_set(set_name, target_col, dados_brutos, pointer)

async def make_search_set_async(dados_brutos):
    return make_search_set(dados_brutos)


def remake_index():
    loop = asyncio.get_event_loop()
    index_db = loop.run_until_complete(asyncio.gather(
        make_index_set_async('est', 'identificador', dados_usuarios),
        make_index_set_async('est-eml', 'eml', dados_usuarios, 'identificador'),
        make_index_set_async('atd', 'identificador', dados_atendimentos),
        make_index_set_async('corr', 'identificador', dados_corrigidos),
        make_index_set_async('proc', 'identificador', dados_processos),
        make_index_set_async('proc_doc', 'numero_sei', dados_processos),
        make_index_set_async('tag', 'marcador', dados_usuarios),
        make_search_set_async(dados_usuarios),
    ))
    save_json(index_db, arquivo_index)


def main():
    if args['construir']:
        remake_index()

    elif args['inserir']:
        pass
        print("Não definido...")

    elif args['sexo']:
        sex_info = load_json(arquivo_sex_info)
        for usr in dados_usuarios:
            primeiro_nome = usr['nome'].split(" ")[0]
            if not primeiro_nome in sex_info.keys():
                print(amarelo(primeiro_nome)+" "+verde("é um nome masculino ou feminino? [m|f|?]"))
                op = input_op(["m", "f", "?"])
                sex_info[primeiro_nome] = op
                save_json(sex_info, arquivo_sex_info)
    


if __name__ == '__main__':
    main()