#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""

Cria relatório resumido a partir das informações do estudo para o estudante alvo.

Usage:
    mkrel <identificador>

Options:
    -v, --version           

"""

import os
import time

from docopt import docopt
from subprocess import getoutput
from datetime import datetime
from python_modules.templates import base_html_layout 
from python_modules.cli_base import pasta_temporaria, arquivo_sex_info, load_json, get_info_doc, dados_estudos, periodo_corrente, dados_lista_creche, dados_lista_moradia, dados_lista_pase, dados_lista_transporte
from python_modules.cli_tools import input_op, verde

args = docopt(__doc__)
initdir = getoutput('pwd')
tmphtmlfile = os.sep.join([pasta_temporaria, 'tmp-mkpdf.html'])
tmppdffile = os.sep.join([pasta_temporaria, 'tmp-mkpdf.pdf'])




def calcular_idade(dn):
    data_nascimento = dn.split('/')
    data_nascimento = datetime(year=int(data_nascimento[2]), month=int(data_nascimento[1]), day=int(data_nascimento[0]))
    hoje = datetime(year=time.localtime()[0], month=time.localtime()[1], day=time.localtime()[2])
    return int(int(str(hoje-data_nascimento).split()[0])/365)

def analisar_renda_mantenedores(pessoa):
    str_grp = []
    str_output = ''
    if pessoa['situacao_renda'] == "Recebe auxílio do grupo familiar":
        str_grp.append('auxilíos percebidos por familiares')

    elif pessoa['situacao_renda'] == "Trabalho formal, setor privado" or pessoa['situacao_renda'] == "Servidor público efetivo" or pessoa['situacao_renda'] == "Servidor público temporário" or pessoa['situacao_renda'] == "Serviço público, cargo comissionado":
        str_grp.append('de atividade formal de emprego')

    elif pessoa['situacao_renda'] == "INSS - Aposentadoria":
        str_grp.append('de aposentadoria')

    elif pessoa['situacao_renda'] == "INSS - Auxílio-doença, Auxílio-reclusão…":
        str_grp.append('de benefício do INSS')

    elif pessoa['situacao_renda'] == "INSS - Seguro-desemprego":
        str_grp.append('de seguro-desemprego')

    elif pessoa['situacao_renda'] == "INSS - Pensão por morte, proveniente de pai/mãe" or pessoa['situacao_renda'] == "INSS - Pensão por morte, proveniente de cônjuge" or pessoa['situacao_renda'] == "Pensão alimentícia formal":
        str_grp.append('de pensão')

    elif pessoa['situacao_renda'] == "Rendimentos: aluguel, participação em lucros":
        str_grp.append('de rendimentos')

    elif pessoa['situacao_renda'] == "Microempreendedor":
        str_grp.append('de atividade de microempresa')

    elif pessoa['situacao_renda'] == "Pensão alimentícia informal":
        str_grp.append('de pensão alimentícia informal')

    elif pessoa['situacao_renda'] == "Estágio remunerado ou menor/jovem aprendiz":
        str_grp.append('de estágio')

    elif pessoa['situacao_renda'] == "Bolsa Acadêmica (PIBIC, PIBID, PIBEX, Mestrado, Doutorado...)":
        str_grp.append('de bolsa acadêmica')

    elif pessoa['situacao_renda'] == "Bolsa da Assistência Estudantil (Auxílio Moradia, Auxílio Socioeconômico…)":
        str_grp.append('dos programas de assistencia estudantil')

    elif pessoa['situacao_renda'] == "Benefício Assistência Social (BPC, Bolsa Família, Renda cidadã…)":
        str_grp.append('de programas de Assistencia Social')

    elif pessoa['situacao_renda'] == "Trabalho autônomo ou informal":
        str_grp.append('de atividade informal')

    elif pessoa['situacao_renda'] == "Poupança/Economias pessoais":
        str_grp.append('de economias pessoais')
    
    contador = len(str_grp)
    while contador != 0:
        if contador == 1:
            str_output += str_grp[contador-1]
        elif contador == 2:
            str_output += str_grp[contador-1] + ' e '
        elif contador > 2:
            str_output += str_grp[contador-1] + ', '
        contador -= 1
    return str_output

def analisar_vinculo_com_programas(cpf, lista_creche=dados_lista_creche, lista_moradia=dados_lista_moradia, lista_pase=dados_lista_pase, lista_transporte=dados_lista_transporte, ret_mode="String"):
    output = "Em relação à Assistencia Estudantil, não constam nas folhas de pagamento indicativos de que #@# estudante esteja vinculad#@# a quaisquer um deles."
    output_strs = []
    output_info = False
    if cpf in lista_creche:
        output_info = True
        output_strs.append("ao Auxílio Creche")
    if cpf in lista_moradia:
        output_info = True
        output_strs.append("à Moradia Pecúnia")
    if cpf in lista_pase:
        output_info = True
        output_strs.append("ao Auxílio Socioeconômico")
    if cpf in lista_transporte:
        output_info = True
        output_strs.append("ao Auxílio Transporte")
    
    o = "Em relação aos programas da Assistência Estudantil, está vinculad#@# "
    if len(output_strs) == 1:
        o += output_strs[0]
    elif len(output_strs) == 2:
        o += output_strs[0] + ' e ' + output_strs[1]
    elif len(output_strs) == 3:
        o += output_strs[0] + ', ' + output_strs[1] + ' e ' + output_strs[2]
    elif len(output_strs) == 4:
        o += output_strs[0] + ', ' + output_strs[1] + ', ' + output_strs[2] + ' e ' + output_strs[3]
        

    if ret_mode == "String":
        if output_info == True:
            return o
        else:
            return output
    
    elif ret_mode == "Values":
        if (len(output_strs), output_strs) == (0, []):
            return ()
        else:
            return (len(output_strs), output_strs)

    


def analisar_vinculo_com_programas_familiar(pessoa, lista_creche=dados_lista_creche, lista_moradia=dados_lista_moradia, lista_pase=dados_lista_pase, lista_transporte=dados_lista_transporte):
    output = ""
    if pessoa.get('cpf'):
        if pessoa['cpf'] != "":
            output = analisar_vinculo_com_programas(pessoa['cpf'], ret_mode="Values")
            if len(output) > 0:
                print("Achou! Vinculo em {}".format(pessoa['vinculo']))
            else:
                print("Sem vínculo com AEs!")

    return output


def analisar_vinculo_com_programas_familiares(estudo):
    o = []
    o_str = ""    
    for pessoa in estudo['membros_grupo_familiar'].keys():
        o.append(analisar_vinculo_com_programas_familiar(estudo['membros_grupo_familiar'][pessoa]))
    
    for l in o:
        if l != "":
            print(l)
            o_str += str(l)
    return o_str


def analiser_agravos_saude():
    o = "Conforme informações e documentos apresentados, há integrantes com doenças crônicas"

def analisar_mantenedores(estudo):
    o = []
    o_str = ""
    for pessoa in estudo['membros_grupo_familiar'].keys():
        if estudo['membros_grupo_familiar'][pessoa]['situacao_renda'] != 'Sem renda':
            estudo['membros_grupo_familiar'][pessoa]['natureza_renda'] = analisar_renda_mantenedores(estudo['membros_grupo_familiar'][pessoa])
            o.append(estudo['membros_grupo_familiar'][pessoa])
    
    if len(o) == 1:
        if o[0]['sexo'] == 'Masculino':
            o_str += "apenas o {} possui renda própria proveniente {}.".format(o[0]['relacao_com_estudante'].lower(), o[0]['natureza_renda'])
        else:
            o_str += "apenas a {} possui renda própria proveniente {}.".format(o[0]['relacao_com_estudante'].lower(), o[0]['natureza_renda'])
    elif len(o) == 2:
        for pessoa_selecionada in o:
            if pessoa_selecionada['sexo'] == 'Masculino':
                o_str += 'o {} possui renda proveniente {}'.format(pessoa_selecionada['relacao_com_estudante'].lower(), pessoa_selecionada['natureza_renda'])
            else:
                o_str += 'a {} possui renda proveniente {}'.format(pessoa_selecionada['relacao_com_estudante'].lower(), pessoa_selecionada['natureza_renda'])
            if pessoa_selecionada == o[-2]:
                o_str += ' e '
    elif len(o) > 2:
        for pessoa_selecionada in o:
            if pessoa_selecionada['sexo'] == 'Masculino':
                o_str += 'o {} possui renda proveniente {}'.format(pessoa_selecionada['relacao_com_estudante'].lower(), pessoa_selecionada['natureza_renda'])
            else:
                o_str += 'a {} possui renda proveniente {}'.format(pessoa_selecionada['relacao_com_estudante'].lower(), pessoa_selecionada['natureza_renda'])
            if pessoa_selecionada == o[-2]:
                o_str += ' e '
            elif pessoa_selecionada == o[-1]:
                pass
            else:
                o_str += ', '


    return o_str

def analisar_cota(valor_campo_cota):
    if valor_campo_cota == "Não":
        return 'não cotista'

    elif valor_campo_cota == "Sim - Escola Pública Baixa Renda PPI":
        return 'cotista baixa renda PPI'

    elif valor_campo_cota == "Sim - Escola Pública Baixa Renda nPPI":
        return 'cotista baixa renda não PPI'

    elif valor_campo_cota == "Sim - Escola Pública Alta Renda PPI":
        return 'cotista alta renda PPI'

    elif valor_campo_cota == "Sim - Escola Pública Alta Renda nPPI":
        return 'cotista alta renda não PPI'
    return 'não cotista'


def analisar_renda_estudante(estudo, nome):
    estudante = {}
    if estudo['situacao_renda_estudante'] != "Sem renda":
        estudante['situacao_renda'] = estudo['situacao_renda_estudante']
        return "{} possui renda própria proveniente {}".format(nome, analisar_renda_mantenedores(estudante))
    return ""



def main():

    output = """
    Estudante de #IDADE# anos de idade, #COTISTA#,
    proveniente de escola #TIPO_EM# com ensino médio concluso em #ANO_EM#,
    vinculad#@# ao curso de #CURSO# (#TURNO#).
    #RENDA_ESTUDANTE#.
    #ESTUDANTE_PROGRAMAS#.
    Reside #SITUACAO_RESIDENCIA# em moradia #MORADIA_CONDICAO#
    na cidade de #MORADIA_CIDADE#, zona #MORADIA_REGIAO# do #MORADIA_LOCALIDADE#.
    O grupo familiar é constituído por mais #NUM_PESSOAS# integrantes, 
    #INTEGRANTES# Destes #RENDA_AVAL#.
    Ainda, conforme as informações prestadas, #FAMILIAR# possui doença crônica...
    Conforme informações e documentos apresentados, está apta a participar do processo seletivo para os programas escolhidos.
    """

    idt = args['<identificador>'].replace('/','')
    sex_info = load_json(arquivo_sex_info)
    os.system("target select '{}'".format(args['<identificador>']))

    estudo_info = get_info_doc(dados_estudos, 'estudo_id', "{}@{}".format(args['<identificador>'], periodo_corrente))

    nome = getoutput("target get nome")
    identificador = getoutput("target get identificador")
    curso = getoutput("target get curso")
    cotista = estudo_info['cotista']
    cpf = estudo_info['cpf_estudante']

    idade = calcular_idade(estudo_info['dn_estudante'])
    tipo_EM = estudo_info['tipo_EM'].lower()
    ano_EM = estudo_info['ano_EM']
    situacao_residencia = estudo_info['situacao_residencia'].lower()
    moradia_localidade = estudo_info['moradia_localidade']
    turno_curso = estudo_info['turno_curso'].lower()
    num_pessoas = len(estudo_info['membros_grupo_familiar'].keys())
    informacao_basica_pessoas = ''
    
    renda_pessoas = analisar_mantenedores(estudo_info)
    print(analisar_vinculo_com_programas_familiares(estudo_info))

    contador = 0
    for pessoa in estudo_info['membros_grupo_familiar'].keys():
        p = estudo_info['membros_grupo_familiar'][pessoa]
        contador += 1
        if p['sexo'] == 'Masculino':
            if p['relacao_com_estudante'] == 'Pai' or p['relacao_com_estudante'] == 'Padrasto':
                informacao_basica_pessoas += "o {} (de {} anos)".format(p['relacao_com_estudante'].lower(), calcular_idade(p['dn']))
            else:
                informacao_basica_pessoas += "um {} (de {} anos)".format(p['relacao_com_estudante'].lower(), calcular_idade(p['dn']))
        else:
            if p['relacao_com_estudante'] == 'Mãe' or p['relacao_com_estudante'] == 'Madrasta':
                informacao_basica_pessoas += "a {} (de {} anos)".format(p['relacao_com_estudante'].lower(), calcular_idade(p['dn']))
            else:
                informacao_basica_pessoas += "uma {} (de {} anos)".format(p['relacao_com_estudante'].lower(), calcular_idade(p['dn']))
        if contador == num_pessoas:
            informacao_basica_pessoas += '. '
        elif contador == num_pessoas-1:
            informacao_basica_pessoas += ' e '
        else:
            informacao_basica_pessoas += ', '
        
   
    if moradia_localidade == 'RIDE':
        moradia_localidade= 'entorno do DF'
    elif moradia_localidade == 'Outra UF':
        moradia_localidade = ''

    moradia_cidade = estudo_info['moradia_cidade']
    
    moradia_regiao = estudo_info['moradia_regiao']
    if moradia_regiao == 'Campo':
        moradia_regiao = 'rural'
    else:
        moradia_regiao = 'urbana'
    
    moradia_condicao = estudo_info['moradia_condicao'].lower()

    output = output.replace("#IDADE#", str(idade))
    output = output.replace("#COTISTA#", analisar_cota(cotista))
    output = output.replace("#TIPO_EM#", tipo_EM)
    output = output.replace("#ANO_EM#", ano_EM)
    output = output.replace("#CURSO#", curso)
    output = output.replace("#TURNO#", turno_curso)
    output = output.replace("#RENDA_ESTUDANTE#", analisar_renda_estudante(estudo_info, nome))
    output = output.replace("#ESTUDANTE_PROGRAMAS#", analisar_vinculo_com_programas(cpf))
    output = output.replace("#NUM_PESSOAS#", str(num_pessoas))
    output = output.replace("#INTEGRANTES#", informacao_basica_pessoas)
    output = output.replace("#SITUACAO_RESIDENCIA#", situacao_residencia)
    output = output.replace("#MORADIA_CONDICAO#", moradia_condicao)
    output = output.replace("#MORADIA_CIDADE#", moradia_cidade)
    output = output.replace("#MORADIA_REGIAO#", moradia_regiao)
    output = output.replace("#MORADIA_LOCALIDADE#", moradia_localidade)
    output = output.replace("#RENDA_AVAL#", renda_pessoas)

    print(nome)
    if sex_info[nome.split(" ")[0]] == "m":
        output = output.replace('#@#', 'o')
    elif sex_info[nome.split(" ")[0]] == "f":
        output = output.replace('#@#', 'a')
    else:
        print(verde("Utilizar qual flexão de gênero? [m|f|i]"))
        op = input_op(["m", "f", "i"])
        if op == "m":
            output = output.replace('#@#', 'o')
        elif op == "f":
            output = output.replace('#@#', 'a')
        else:
            output = output.replace('#@#', 'x')
    
    while output.find("  ") != -1:
        output = output.replace('\n', ' ').replace('  ', ' ').replace('. .','.').replace('..','.')
        if output.find("  ") == -1:
            output = output[1:]
        continue


    print(output)

        
if __name__ == '__main__':
    main()
