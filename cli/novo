#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""

Adiniona novos registros nos arquivos de dados.

Usage:
    novo ( usr | usuario ) <identificador>
    novo ( atd | atendimento ) <identificador>
    novo ( sei | processo ) <identificador> <assunto>
    novo ( res | resposta-de-processo ) <num_sei>
    novo ( est | estudo ) <identificador>
    novo ( dbc | campo-db ) <arquivo_db> <coluna> [<lista-ops>] 
    novo ( dbi | inserir-info ) ( mesclado | aninhado ) <arquivo_db> <formulario> 
    novo ( opt | inserir-op) <coluna> <opcao> <formulario>

Options:
    --version

Observações:
    A opção <lista-ops> pode ser separada por ';' para criar um campo de múltipla escolha.
    O comando 'dbi' insere as respostas de um formulário¹ em um arquivo de dados JSON já criado.
    O comando 'opt' insere uma alternativa ao campo de multipla escolha indicado de um formulário.
    Apenas 'root' pode executar os comandos 'pro' e 'tgr'.

¹Estrutura do arquivo de formulário:
	{
		"titulo": "Registro de atendimento",
		"descricao": "Intrumental para registro de atendimentos no âmbito do SPS/FUP",
        "arquivo_de_registro": "atendimentos.json",
        "campos_de_listagem": "timestamp, identificador, atd_t",
		"questoes":
		[
			{
				"enunciado": "Matrícula",
				"id": "identificador",
				"tipo": "text",
			},
			{
				"enunciado": "Tipo de atendimento",
				"id": "atd_t",
				"tipo": "checkbox",
				"alternativas" :
				[
					"Informação presencial",
					"Informação via telefone",
					"Outro"²
				]            
			}
		]
	}	

²A inclusão da opção 'Outro' permite a insersão dinâmica de outros valores no formulário

"""


import os

from docopt import docopt
from subprocess import getoutput
from python_modules.cli_base import \
    envio_automatico_email,\
    periodo_corrente,\
    hostname

from python_modules.cli_decorators import check_config_existance

from python_modules.cli_base import pasta_raiz_do_aplicativo

from python_modules.cli_base import \
    envio_automatico_email,\
    periodo_corrente,\
    trabalhar_com_fragmentos

from python_modules.cli_base import \
    arquivo_corrigidos,\
    arquivo_index,\
    arquivo_usuarios,\
    arquivo_processos,\
    arquivo_atendimentos,\
    arquivo_estudos,\
    arquivo_fragmentos_recebidos,\
    pasta_de_dados,\
    pasta_de_fragmentos,\
    formulario_registro_de_correcao,\
    formulario_atendimentos,\
    formulario_novo_usuario,\
    formulario_novo_processo,\
    formulario_estudo_estudante,\
    formulario_estudo_grupo_familiar,\
    formulario_estudo_membros_grupo_familiar

from python_modules.cli_db_loader import \
    get_col_values,\
    timestamp,\
    dados_usuarios,\
    dados_processos,\
    dados_atendimentos,\
    dados_corrigidos,\
    dados_index,\
    dados_estudos,\
    calculate_col_width

from python_modules.cli_base import \
    save_target_info,\
    numero_sei_mascara,\
    numero_identificador_mascara
    
from python_modules.py_functions_json import save_json, load_json
from python_modules.cli_tools import select_op, select_ops, limpar_tela, verde


args = docopt(__doc__)

matriculas = get_col_values('identificador', dados_usuarios)


def render_form_get_values(form_file, skip_q=[]):
	'''
	Renderiza as questões de um formulário JSON conforme a estrutura abaixo.
	Retorna um dicionário com as respostas.
	As chaves são definidas conforme o atributo 'id'.
	Os valores são resultado do input dos usuários.

	{
		"titulo": "Registro de atendimento",
		"descricao": "Intrumental para registro de atendimentos no âmbito do SPS/FUP",
		"questoes":
		[
			{
				"enunciado": "Matrícula",
				"id": "identificador",
				"tipo": "text",
			},
			{
				"enunciado": "Tipo de atendimento",
				"id": "atd_t",
				"tipo": "radio",
				"alternativas" :
				[
					"Informação presencial",
					"Informação via telefone",
					...
				]            
			}
		]
	}	
	'''

	def objective_question_handler(q):
		rewrite_form = False
		grupos_de_opcao = []
		grupos_de_alternativas = []
		print(verde(q['enunciado']))

		if q['tipo'] == 'radio':
			if type(q['alternativas']) == list:
				nfo[q['id']] = select_op(q['alternativas'], 1)
			else:
				print("Campos do tipo 'radio' devem ter suas alternativas organizadas em lista...")
				print("Favor corrigir o arquivo de formulário...")
				exit()

		elif q['tipo'] == 'checkbox':
			if type(q['alternativas']) == list:
				nfo[q['id']] = "; ".join(select_ops(q['alternativas'], 1))
			
			elif type(q['alternativas']) == dict:
				for a in q['alternativas'].keys():
					grupos_de_alternativas.append(a)
				grupos_de_alternativas.sort()
				gopt = select_ops(grupos_de_alternativas, 1)
				alternativas_efetivas = []
				for grp_op_key in gopt:
					grupos_de_opcao.append(grp_op_key)
					for op in q['alternativas'][grp_op_key]:
						if not op in alternativas_efetivas:
							alternativas_efetivas.append(op)
				alternativas_efetivas.sort()
				alternativas_efetivas.append("Outro")
				nfo[q['id']] = select_ops(alternativas_efetivas, 1)

		if type(q['alternativas']) == list:
			if nfo[q['id']].find('Outro') != -1:
				outros_recem_listados = []
				while True:
					outro_detalhes = input('Especifique: ')
					outros_recem_listados.append(outro_detalhes)
					q['alternativas'].remove('Outro')
					q['alternativas'].append(outro_detalhes)
					q['alternativas'].sort()
					q['alternativas'].append('Outro')
					print("")
					print(verde("Adicionar outra opção? [s|n]"))
					op = input_op(['s','n'])
					if op == 'n':
						break
				
				if len(outros_recem_listados) > 1:
					outros_recem_listados = "; ".join(outros_recem_listados)
				else:
					outros_recem_listados = outros_recem_listados[0]

				nfo[q['id']] = nfo[q['id']].replace('Outro', outros_recem_listados)
				rewrite_form = True
			print("")
			return (nfo[q['id']], rewrite_form)
		
		elif type(q['alternativas']) == dict:
			nfo_q_id = "; ".join(nfo[q['id']])
			if nfo_q_id.find('Outro') != -1:
				outros_recem_listados = []
				while True:
					print(verde('À qual grupo a obção divergente pertence: '))
					grp_op_key_field = select_op(grupos_de_alternativas, 1)
					outro_detalhes = input('Especifique a opção divergente: ')
					outros_recem_listados.append(outro_detalhes)
					q['alternativas'][grp_op_key_field].append(outro_detalhes)
					q['alternativas'][grp_op_key_field].sort()
					outros_recem_listados.append(outro_detalhes)
					print("")
					print(verde("Adicionar outra opção? [s|n]"))
					op = input_op(['s','n'])
					if op == 'n':
						break
				
				if len(outros_recem_listados) > 1:
					outros_recem_listados = "; ".join(outros_recem_listados)
				else:
					outros_recem_listados = outros_recem_listados[0]

				nfo[q['id']] = nfo_q_id.replace('Outro', outros_recem_listados)
				rewrite_form = True
		
		if rewrite_form == True:
			save_json(form, form_file)

		print("")
		return (nfo[q['id']], rewrite_form)


	form = load_json(form_file)
	nfo = {}
	for q in form['questoes']:
		if q['id'] in skip_q:
			pass

		elif q['tipo'] == 'text':
			nfo[q['id']] = input("{}: ".format(verde(q['enunciado'])))
			print("")

		elif q['tipo'] == 'radio' or q['tipo'] == 'checkbox':
			q_response = objective_question_handler(q)
			nfo[q['id']] = q_response[0]

	return nfo


def novo_usuario(identificador):
    nfo = render_form_get_values(formulario_novo_usuario, ['identificador'])
    nfo['identificador'] = numero_identificador_mascara(identificador)
    dados_usuarios.append(nfo)
    save_json(dados_usuarios, arquivo_usuarios)
    os.system("cli-indexdb sexo")
    if trabalhar_com_fragmentos:
        frag_name = 'USR'+getoutput("date +%Y%U%u%H%M%S%N")+'@'+hostname
        cripto_frag_name = frag_name+'.cpt'
        fragmento = os.sep.join([pasta_de_fragmentos, frag_name])
        save_json(nfo, fragmento)
        recebidos = load_json(arquivo_fragmentos_recebidos)
        recebidos.append(cripto_frag_name)
        save_json(recebidos, arquivo_fragmentos_recebidos)
        os.system('fragment send "{}"'.format(fragmento))



def novo_processo(identificador, assunto):
    nfo = render_form_get_values(formulario_novo_processo, ['identificador'])
    nfo['timestamp'] = timestamp() 
    nfo['identificador'] = numero_identificador_mascara(identificador)
    nfo['assunto'] = assunto
    nfo['resultado'] = ''
    nfo['numero_sei'] = numero_sei_mascara(nfo['numero_sei'])
    dados_processos.append(nfo)
    save_json(dados_processos, arquivo_processos)
    return nfo['numero_sei']

def novo_resultado_processo(processo_num):
    for proc in dados_processos:
        if proc['numero_sei'] == processo_num:
            proc['resultado'] = select_op(['Deferido', 'Indeferido'], 1)
            if proc['resultado'] == 'Indeferido':
                proc['justificativa'] = input("Justificativa: ")
            save_json(dados_processos, arquivo_processos)
            return [proc['identificador'], proc['resultado']]
    
def novo_atendimento(identificador):
    save_target_action = False
    idt = numero_identificador_mascara(identificador)
    if not idt in matriculas:
        novo_usuario(idt)
        matriculas.append(idt)
        save_target_action = True
    nfo = render_form_get_values(formulario_atendimentos, ['identificador'])
    nfo['timestamp'] = timestamp() 
    nfo['identificador'] = idt
    nfo['prof_atd'] = getoutput("whoami")+'@'+getoutput("hostname")
    dados_atendimentos.append(nfo)
    if save_target_action == True:
        save_target_info(idt, dados_usuarios)
    save_json(dados_atendimentos, arquivo_atendimentos)
    return nfo['atd_t']


def nova_correcao(identificador):
    nfo = render_form_get_values(formulario_registro_de_correcao, ['identificador'])
    idt = numero_identificador_mascara(identificador)
    nfo['timestamp'] = timestamp() 
    nfo['identificador'] = idt
    if not idt in matriculas:
        novo_usuario(idt)
        matriculas.append(idt)    
    dados_corrigidos.append(nfo)
    save_json(dados_corrigidos, arquivo_corrigidos)

def nova_coluna(nome_col, json_file, options=None):
    db_file = load_json(os.sep.join([pasta_de_dados, json_file]))
    if options != None and options.find(";") != -1:
        opz = options.split(';')
        selection = True
    else:
        opz = options
        selection = False
    for i in db_file:
        if i.get(nome_col) == None and selection == True:
            for col in i.keys():
                print(col, ' -> ', i[col])
            nova_col_nfo = select_ops(opz, 1)
            if len(nova_col_nfo) > 1:
                i[nome_col] = '; '.join(nova_col_nfo)
            else:
                i[nome_col] = nova_col_nfo[0]
        elif i.get(nome_col) == None and selection == False:
            if options == None:
                i[nome_col] = input(str(nome_col)+': ')
            else:
                i[nome_col] = opz
        save_json(db_file, os.sep.join([pasta_de_dados, json_file]))

def novo_estudo_info_estudante(identificador):
    nfo = {}
    idt = numero_identificador_mascara(identificador)
    nfo['semestre'] = periodo_corrente
    nfo['identificador'] = idt
    nfo['estudo_id'] = timestamp('mkid')
    if not idt in matriculas:
        novo_usuario(idt)
        matriculas.append(idt)
    nfo_tmp = render_form_get_values(formulario_estudo_estudante, ['identificador'])
    for col in nfo_tmp.keys():
        nfo[col] = nfo_tmp[col]
    del(nfo_tmp)
    dados_estudos.append(nfo)
    save_json(dados_estudos, arquivo_estudos)
    return nfo


def novo_estudo_info_familia(identificador, nfo):
    nfo_tmp = render_form_get_values(formulario_estudo_grupo_familiar, ['identificador'])
    dados_estudos.remove(nfo)
    for col in nfo_tmp.keys():
        nfo[col] = nfo_tmp[col]
    dados_estudos.append(nfo)
    save_json(dados_estudos, arquivo_estudos)
    return nfo



def novo_estudo_info_membros_familia(identificador, nfo):
    nfo_tmp = render_form_get_values(formulario_estudo_membros_grupo_familiar, ['identificador'])
    dados_estudos.remove(nfo)
    if nfo.get('membros_grupo_familiar'):
        nfo['membros_grupo_familiar'][nfo_tmp['nome']] = nfo_tmp
    else:
        nfo['membros_grupo_familiar'] = {}
        nfo['membros_grupo_familiar'][nfo_tmp['nome']] = nfo_tmp
    for col in nfo_tmp.keys():
        nfo[col] = nfo_tmp[col]
    dados_estudos.append(nfo)
    save_json(dados_estudos, arquivo_estudos)
    return nfo


def insert_info(json_estudantes, print_fields, formulario_q_add, novo_nome_de_campo):
    #insert_info('Consultas_OldSAE.json', ['identificador','Nome','Periodo','Data de Nascimento'], 'form_estudo_socioeconomico.json', 'Estudo Social e Economico')
    estudantes = load_json('./{}'.format(json_estudantes))
    novas_questoes = load_json('./forms/{}'.format(formulario_q_add))
    for e in estudantes:
        print(e)
        if e.get(novo_nome_de_campo) == None:
            limpar_tela()
            print_nfo = ""
            for f in print_fields:
                print_nfo += e[f] + os.linesep
            print(print_nfo)
            nfo = render_form_get_values(novas_questoes)
            e[novo_nome_de_campo] = nfo
            save_json(estudantes, './{}'.format(json_estudantes))


@check_config_existance
def main():
    if args['usr'] or args['usuario']:
        identificador = numero_identificador_mascara(args['<identificador>'])
        novo_usuario(identificador)
        matriculas.append(identificador)

    elif args['atd'] or args['atendimento']:
        identificador = numero_identificador_mascara(args['<identificador>'])
        save_target_info(identificador, dados_usuarios)
        atd_t = novo_atendimento(identificador)

        if atd_t == "Encaminhamento de pedido de auxílio emergencial":
            numero_sei = novo_processo(identificador, atd_t)
            if envio_automatico_email:
                os.system('cli-api insert -tp atendimentos.json "identificador::{}" "procedimento::{}" "atd_t::{}" "resultado::{}"'.format(identificador, "Atendimento via e-mail", "Envio de número de processo", "Verificar status de envio de email..."))
                os.system('echo "{numero_sei}" | sendeml get "$(target get eml)" "Assistência Estudantil - Processo de Auxílio Emergencial" "Segue o número do processo para acompanhamento do resultado. Com este número você pode consultar o resultado com qualquer pessoa do SPS que possua acesso ao SEI."'.format(numero_sei=numero_sei))

        elif atd_t == "Solicitação de acesso extraordinário ao RU":
            numero_sei = novo_processo(identificador, atd_t)
            if envio_automatico_email:
                os.system('echo "{numero_sei}" | sendeml get "$(target get eml)" "Assistência Estudantil - Processo de Acesso ao RU" "Segue o número do processo para que você possa acompanhar do resultado. Com este número você pode consultar o resultado junto a qualquer pessoa do SPS que possua acesso ao SEI."'.format(numero_sei=numero_sei))
                os.system('cli-api insert -tp atendimentos.json "identificador::{}" "procedimento::{}" "atd_t::{}" "resultado::{}"'.format(identificador, "Atendimento via e-mail", "Envio de número de processo", "Verificar status de envio de email..."))

        elif atd_t == "Recebimento/digiralização de pedido de recurso ao resultado da avaliação socioeconômica":
            numero_sei = novo_processo(identificador, atd_t)
            if envio_automatico_email:
                os.system('echo "{numero_sei}" | sendeml get "$(target get eml)" "Assistência Estudantil - Processo de Recurso à Avaliação Socioeconômica" "Segue o númro do processo de recurso. Se até a data prevista para o resultado você não obtiver resposta, vá ao SPS, forneça este número e informe a pendência."'.format(numero_sei=numero_sei))
                os.system('cli-api insert -tp atendimentos.json "identificador::{}" "procedimento::{}" "atd_t::{}" "resultado::{}"'.format(identificador, "Atendimento via e-mail", "Envio de número de processo", "Verificar status de envio de email..."))

        elif atd_t == "Emissão de declaração PPAES":
            os.system('mkdoc dec-ppaes "{}"'.format(identificador))
        
        elif atd_t == "Emissão de declaração para criação de Conta Corrente":
            os.system('mkdoc dec-cc "{}"'.format(identificador))

    elif args['sei'] or args['processo']:
        identificador = numero_identificador_mascara(args['<identificador>'])
        novo_processo(identificador, args['<assunto>'])

    elif args['res'] or args['resposta-de-processo']:
        resultado = novo_resultado_processo(args['<num_sei>'])
        save_target_info(resultado[0], dados_usuarios)
        if envio_automatico_email:
            os.system('echo "{numero_sei}" | sendeml get "$(target get eml)" "Assistência Estudantil - Comunicado de resultado de processo" "Informo que o processo {numero_sei} foi {resultado}."'.format(numero_sei=args['<num_sei>'], resultado=resultado[1]))
            os.system('cli-api insert -tp atendimentos.json "identificador::{}" "procedimento::{}" "atd_t::{}" "resultado::{}"'.format(resultado[0], "Atendimento via e-mail", "Comunicado de resultado de processo", "Verificar status de envio de email..."))

    elif args['est'] or args['estudo']:
        identificador = numero_identificador_mascara(args['<identificador>'])
        nfo = novo_estudo_info_estudante(identificador)
        nfo = novo_estudo_info_familia(identificador, nfo)
        print("")
        print(verde("Outras pessoas constituem o seu grupo familiar além de você?"))
        resposta = select_op(["Sim", "Não"], 1)
        while resposta == "Sim":
            print("")
            nfo = novo_estudo_info_membros_familia(identificador, nfo)
            print(verde("Registrar outra pessoa?"))
            resposta = select_op(["Sim", "Não"], 1)            


    elif args['dbc'] or args['campo-db']:
        nova_coluna(args['<coluna>'], args['<arquivo_db>'], args['<lista-ops>'])

    elif args['dbi'] or args['inserir-info']:
        pass
        
if __name__ == '__main__':
    cmd = main()
    newpid = os.fork()
    if newpid == 0:
        calculate_col_width()
        os.system("cli-indexdb construir")