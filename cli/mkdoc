#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""

Gera declarações padronizadas a partir do cruzamento de modelos com as informações dos estudantes.

Usage:
    mkdoc [ -d ] ( dec-ppaes ) <identificador>
    mkdoc ( dec-cc ) <identificador>

Options:
    -v, --version           
    -d, --detalhada

"""

import os

from docopt import docopt
from subprocess import getoutput
#from python_modules.templates import base_html_layout 
from python_modules.cli_machine_info import tmpdir
from python_modules.cli_global_paths import arquivo_sex_info, arquivo_modelo_ppaes, arquivo_modelo_ppaes_detalhado
from python_modules.cli_db_loader import timestamp
from python_modules.cli_tools import verde, amarelo, input_op
from python_modules.py_functions_json import load_json, save_json

args = docopt(__doc__)
initdir = getoutput('pwd')


def main():
    if args['dec-ppaes']:
        idt = args['<identificador>'].replace('/','')
        sex_info = load_json(arquivo_sex_info)
        tmp_working_folder = os.sep.join([tmpdir, idt])
        os.mkdir(tmp_working_folder)
        os.system("target select '{}'".format(args['<identificador>']))
        if args['--detalhada']:
            os.system('cp "{}" "{}"'.format(arquivo_modelo_ppaes_detalhado, tmp_working_folder))
            modelo_fname = arquivo_modelo_ppaes_detalhado.split("/")[-1]
        else:
            os.system('cp "{}" "{}"'.format(arquivo_modelo_ppaes, tmp_working_folder))
            modelo_fname = arquivo_modelo_ppaes.split("/")[-1]
        os.chdir(tmp_working_folder)
        os.system('unzip "{mod_fn}"; rm "{mod_fn}"'.format(mod_fn=modelo_fname))
        
        with open("content.xml", 'r') as contentxml:
            fdata = contentxml.read()
        
        nome = getoutput("target get nome")
        identificador = getoutput("target get identificador")
        curso = getoutput("target get curso")
        data = timestamp("long")

        if sex_info[nome.split(" ")[0]] == "m":
            fdata = fdata.replace('#@#', 'o')
        elif sex_info[nome.split(" ")[0]] == "f":
            fdata = fdata.replace('#@#', 'a')
        else:
            print(verde("Utilizar qual flexão de gênero? [m|f|i]"))
            op = input_op(["m", "f", "i"])
            if op == "m":
                fdata = fdata.replace('#@#', 'o')
            elif op == "f":
                fdata = fdata.replace('#@#', 'a')
            else:
                fdata = fdata.replace('#@#', 'x')

        fdata = fdata.replace('#NOME#', nome)
        fdata = fdata.replace('#IDENTIFICADOR#', identificador)
        fdata = fdata.replace('#CURSO#', curso)
        fdata = fdata.replace('#DATA#', data)

        with open("content.xml", 'w') as contentxml:
            contentxml.write(fdata)

        os.system('zip "{identificador} {nome} - PPAES.odt" * -mr0; mv "{identificador} {nome} - PPAES.odt" "{initdir}/"'.format(nome=nome, identificador=idt, initdir=initdir))
        os.system('rm -fR "{}"'.format(tmp_working_folder))
        
    elif args['dec-cc']:
        pass

        
if __name__ == '__main__':
    main()
