#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""

Realiza processamento de arquivos nos formatos CSV, JSON ou TXT.
Algumas funções foram concebidas para processarem arquivos de relatórios dos sistemas SAE e SIGRA da UnB.

Usage:
    unb-tools ( join-alu-rel ) <target-folder> <output-txt-fname>
    unb-tools ( integrate_old_sae_etd )
    unb-tools ( create_curric_metainfo_index )
    unb-tools ( old_sae_extract_list )
    unb-tools ( old_sae_extract_hist_list )
    unb-tools ( process_sae_etd ) <target-sae-txt-file>
    unb-tools ( multiprocess_sae_etd )
    unb-tools ( fix-csv-alu-rel ) <csv-file> [ <csv-delimiter> ]
    unb-tools ( curric-process ) <target-curric-txt-file>
    unb-tools ( multi-curric-process ) <target-curric-folder>
    unb-tools ( sigra-hist-process ) <target-sigra-hist-txt-file>
    unb-tools ( multi-sigra-hist-process ) <target-multi-hist-zipfile>
    unb-tools ( join-union ) ( csv | json ) <file1> <file2> <joint-col>
    unb-tools ( join-intersection )  ( csv | json ) <file1> <file2> <joint-col>
    unb-tools ( cross-values ) ( csv | json ) <file>
    unb-tools ( fill-gaps) ( csv | json ) <file> <ref-cols>
    unb-tools ( remove-lines ) <file1> <coluna> <valor-de-conferencia>


Options:
    --version

Observações:

"""


import getpass
import os

from docopt import docopt
from subprocess import getoutput
from python_modules.py_functions_data_manager import render_form_get_values
from python_modules.cli_unb_tools import \
    join_alurel,\
    old_sae_etd_rename_files,\
    old_sae_etd_strip_chars,\
    old_sae_etd_movefiles_to_folder,\
    old_sae_extract_list,\
    old_sae_extract_hist_list,\
    process_sae_etd,\
    fix_joined_alurel,\
    process_curric,\
    multi_process_curric,\
    multiprocess_sae_etd,\
    process_sigra_hist,\
    multi_process_sigra_academic_history,\
    cruzar_variaveis,\
    create_curric_metainfo_index

from python_modules.py_functions_csv import remove_lines

from python_modules.cli_tools import select_op, select_ops
from python_modules.py_functions_json import save_json, load_json
from python_modules.py_functions_csv import make_complete_stat_from_csv, join_csv_intersection, join_csv_union

args = docopt(__doc__)

def main():
    if args['join-alu-rel']:
        join_alurel(args['<target-folder>'], args['<output-txt-fname>'])

    elif args['integrate_old_sae_etd']:
        old_sae_etd_rename_files()
        old_sae_etd_movefiles_to_folder()
        old_sae_etd_strip_chars()

    elif args['create_curric_metainfo_index']: 
        create_curric_metainfo_index()

    elif args['old_sae_extract_list']: 
        old_sae_extract_list()

    elif args['old_sae_extract_hist_list']: 
        old_sae_extract_hist_list()

    elif args['process_sae_etd']:
        process_sae_etd(args['<target-sae-txt-file>'])

    elif args['multiprocess_sae_etd']:
        multiprocess_sae_etd()

    elif args['fix-csv-alu-rel']:
        fix_joined_alurel(args['<csv-file>'], args['<csv-delimiter>'])
 
    elif args['curric-process']:
        process_curric(args['<target-curric-txt-file>'])
 
    elif args['multi-curric-process']:
        multi_process_curric(args['<target-curric-folder>'])
 
    elif args['sigra-hist-process']:
        process_sigra_hist(args['<target-sigra-hist-txt-file>'])
 
    elif args['multi-sigra-hist-process']:
        multi_process_sigra_academic_history(args['<target-multi-hist-zipfile>'])
 
    elif args['join-union']:
        if args['csv']:
            join_csv_union(args['<file1>'], args['<file2>'], args['<joint-col>'])
        elif args['json']:
            pass

    elif args['join-intersection']:
        if args['csv']:
            join_csv_intersection(args['<file1>'], args['<file2>'], args['<joint-col>'])
        elif args['json']:
            pass
    
    elif args['remove-lines']:
        remove_lines(args['<file1>'], args['<coluna>'], args['<valor-de-conferencia>'])
 
    elif args['cross-values']:
        if args['csv']:
            cruzar_variaveis(args["<file>"])
        elif args['json']:
            pass
 


if __name__ == '__main__':
    main()