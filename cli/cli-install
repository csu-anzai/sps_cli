#!/bin/sh

#
# Script de intalação
#

GLOBAL_CONFIG_FOLDER="/etc/cli"
GLOBAL_CONFIG_FILE="cli_tools.conf"
PASTA_RAIZ_DO_PROGRAMA=""
PASTA_DE_DADOS=""
PASTA_DE_SEGURANCA=""
PASTA_DE_COMANDOS=""
PASTA_TEMPORARIA=""
PASTA_DE_MANIPULACAO_DE_DADOS=""
RCLONE_DRIVE=""
ENVIO_AUTOMATICO_EMAIL=1
ENVIO_DE_FRAGMENTOS=1


warning () {
    printf "Usage:\n"
    printf "    cli-install\n"
}

full_info () {
    printf "\n"
    printf "Script de intalação do pacote 'cli-tools'.\n"
    printf "\n"
    warning
    printf "\n"
    printf "Options:\n"
    printf "    -h, --help\n"
    printf "\n"
}

only_root () {
    printf "Apenas o root pode executar esta ação...\n"
    exit 
}

mkrandnum () {
    rm -f "$1" || touch "$1"
    awk '
        BEGIN {	
        srand()
        for (i = 0; i < 256; i++)
            printf("%d %d\n", 256 * rand(), 256 * rand())
        }' | while read byteone bytetwo;
            do	
                printf "%s%s" "$byteone" "$bytetwo" >> "$1"
            done
}

if [ "$(whoami)" != "root" ];
then
    only_root
fi

clear
printf "Iniciando instalação do 'cli-tools'...\n\n"
printf "» Criando arquivo de configuração padrão: "
printf "/etc/cli/cli_tools.conf\n\n"
mkdir -p "$GLOBAL_CONFIG_FOLDER"
if [ ! -f "$GLOBAL_CONFIG_FOLDER/$GLOBAL_CONFIG_FILE" ]; 
then
    touch "$GLOBAL_CONFIG_FOLDER/$GLOBAL_CONFIG_FILE"
    printf "» Inserindo variáveis globais no arquivo...\n\n"

    printf "» Indique a pasta raíz de 'cli-tools' (caminho para pasta de clonagem).\n"
    printf "$: "
    read -r PASTA_RAIZ_DO_PROGRAMA

    printf "\n» Indique o caminho absoluto para a pasta de dados.\n"
    printf "$: "
    read -r PASTA_DE_DADOS

    printf "\n» Indique o caminho absoluto para a pasta de segurança.\n"
    printf "$: "
    read -r PASTA_DE_SEGURANCA

    printf "\n» Indique o caminho absoluto para a pasta temporária do sistema.\n"
    printf "$: "
    read -r PASTA_TEMPORARIA

    printf "\n» Indique o caminho para a pasta de trabalho.\n"
    printf "$: "
    read -r PASTA_DE_MANIPULACAO_DE_DADOS

    FIRST_LOOP=1
    while true;
    do 
        if [ $FIRST_LOOP -eq 1 ];
        then
            printf "\n» Ativar envio automático de email? [s|n]\n"
        else
            printf "\n» Responda [s] para 'sim' ou [n] para 'não'...\n"
        fi
        printf "$: "
        read -r ENVIO_AUTOMATICO_EMAIL
        case $ENVIO_AUTOMATICO_EMAIL in
        [sS]* )
            ENVIO_AUTOMATICO_EMAIL=1
            break;;
        
        [nN]* )
            ENVIO_AUTOMATICO_EMAIL=0
            break;;

        * )
            FIRST_LOOP=0
            printf "Reposta inválida...\n";;
        esac
    done

    FIRST_LOOP=1
    while true;
    do 
        if [ $FIRST_LOOP -eq 1 ];
        then
            printf "\n» Ativar envio de fragmentos? [s|n]\n"
        else
            printf "\n» Responda [s] para 'sim' ou [n] para 'não'...\n"
        fi
        printf "$: "
        read -r ENVIO_DE_FRAGMENTOS
        case $ENVIO_DE_FRAGMENTOS in
        [sS]* )
            ENVIO_DE_FRAGMENTOS=1
            break;;
        
        [nN]* )
            ENVIO_DE_FRAGMENTOS=0
            break;;

        * )
            FIRST_LOOP=0
            printf "Reposta inválida...\n";;
        esac
    done
   
    printf "\n» Indique o nome do drive do rclone que será utilizado para fragmentos e backup.\n"
    printf "$: "
    read -r RCLONE_DRIVE



    PASTA_DE_COMANDOS="$PASTA_RAIZ_DO_PROGRAMA/cli/"
    {
        printf "PASTA_RAIZ_DO_PROGRAMA=%s\n" "$PASTA_RAIZ_DO_PROGRAMA";
        printf "PASTA_DE_DADOS=%s\n" "$PASTA_DE_DADOS";
        printf "PASTA_DE_COMANDOS=%s\n" "$PASTA_DE_COMANDOS";
        printf "PASTA_DE_SEGURANCA=%s\n" "$PASTA_DE_SEGURANCA";
        printf "PASTA_TEMPORARIA=%s\n" "$PASTA_TEMPORARIA";
        printf "PASTA_DE_MANIPULACAO_DE_DADOS=%s\n" "$PASTA_DE_MANIPULACAO_DE_DADOS";
        printf "ENVIO_AUTOMATICO_EMAIL=%s\n" "$ENVIO_AUTOMATICO_EMAIL";
        printf "ENVIO_DE_FRAGMENTOS=%s\n" "$ENVIO_DE_FRAGMENTOS";        
        printf "RCLONE_DRIVE=\n" "$RCLONE_DRIVE";
    } > "$GLOBAL_CONFIG_FOLDER/$GLOBAL_CONFIG_FILE"

    printf "\nPATH='$(printf %s):%s'\n" "$PATH" "$PASTA_DE_COMANDOS" >> /root/.bashrc

    printf "\nPATH='$(printf %s):%s'\n" "$PATH" "$PASTA_DE_COMANDOS" >> /etc/skel/.bashrc

    LINUX_USERS=$(grep "home" /etc/passwd | awk -F":" '{ print $1 }')

    printf "\n» Criando grupo 'cli'...\n"
    groupadd cli

    printf "\n» Incluindo pasta dos comandos no PATH local dos usuários:\n"
    for USER in $LINUX_USERS;
    do
        printf "   - %s\n" "$USER"
        printf "PATH=\"$(printf "%s"):%s\"\n" "$PATH" "$PASTA_DE_COMANDOS" >> "/home/$USER/.bashrc"
        usermod -a -G cli "$USER"
        MSG="Execute o comando [newgrp cli] para ter acesso ao banco de dados do SPS."
        printf "if [ ! -f '%s/%s' ]; \nthen \n\tclear; \n\tprintf '%s'; \n\ttouch '%s/%s'; \nfi" "$PASTA_TEMPORARIA" "$USER" "$MSG" "$PASTA_TEMPORARIA" "$USER" >> "/home/$USER/.bashrc"
    done
fi

printf "\n» Criando arquivos de dados pendentes:\n"
printf "  Arquivos antigos que possuam conteúdo serão preservados...\n"
mkdir -p "$PASTA_DE_DADOS/fragmentos"
mkdir -p "$PASTA_DE_DADOS/indexados"
mkdir -p "$PASTA_DE_SEGURANCA"
mkdir -p "$PASTA_DE_MANIPULACAO_DE_DADOS"

ARQUIVOS_DE_DADOS="atendimentos.json corrigidos.json processos.json profissionais.json usuarios.json estudos.json backup-info.json index_db.json emitidos.json recebidos.json"
for ARQUIVO in $ARQUIVOS_DE_DADOS;
do
    if [ "$ARQUIVO" = "index_db.json" ];
    then
        touch "$PASTA_DE_DADOS/indexados/$ARQUIVO"
        if [ $(wc -l < "$PASTA_DE_DADOS/indexados/$ARQUIVO") -lt 2 ]; 
        then 
            printf "[]" > "$PASTA_DE_DADOS/indexados/$ARQUIVO";
            printf "   - %s\n" "$ARQUIVO"
        fi
    elif [ "$ARQUIVO" = "emitidos.json" ] || [ "$ARQUIVO" = "recebidos.json" ];
    then
        touch "$PASTA_DE_DADOS/fragmentos/$ARQUIVO"
        if [ $(wc -l < "$PASTA_DE_DADOS/fragmentos/$ARQUIVO") -lt 2 ]; 
        then 
            printf "[]" > "$PASTA_DE_DADOS/fragmentos/$ARQUIVO";
            printf "   - %s\n" "$ARQUIVO"
        fi
    else
        touch "$PASTA_DE_DADOS/$ARQUIVO"    
        if [ $(wc -l < "$PASTA_DE_DADOS/$ARQUIVO") -lt 2 ]; 
        then 
            printf "[]" > "$PASTA_DE_DADOS/$ARQUIVO";
            printf "   - %s\n" "$ARQUIVO"
        fi
    fi
done



chown root:cli "$PASTA_DE_DADOS" -R
chmod g+rw "$PASTA_DE_DADOS" -R 
chmod o-rwx "$PASTA_DE_DADOS" -R

chown root:cli "$PASTA_DE_MANIPULACAO_DE_DADOS" -R
chmod g+rw "$PASTA_DE_MANIPULACAO_DE_DADOS" -R 
chmod o-rwx "$PASTA_DE_MANIPULACAO_DE_DADOS" -R

OP=false
FIRST_LOOP=true
while true;
do
    if [ $FIRST_LOOP = true ];
    then
        printf "\n» Criar um arquivo com código para encriptação de dados? [s|n]\n$: "
        FIRST_LOOP=false
    fi
    read -r OP
    case $OP in
    [sS]* )
        printf "\n» Criando arquivo com código para encriptação...\n";
        mkrandnum "$PASTA_DE_SEGURANCA/ccrypt-key"
        break;;
    
    [nN]* )
        break;;

    * )
        printf "Você deve optar entre [s|n]...\n";;
    esac
done

chown root:cli "$PASTA_DE_SEGURANCA" -R
chmod g+r "$PASTA_DE_SEGURANCA" -R
chmod o-rwx "$PASTA_DE_SEGURANCA" -R

printf "\n» Verificando dependências não instaladas...:\n"

DEPENDENCIAS="python3 pip3 rclone zip ccrypt nano node npm git pandoc wkhtmltopdf"
INSTALAR_DEPENDENCIAS=0

for PROGRAMA in $DEPENDENCIAS;
do
    which "$PROGRAMA"
    if [ $? -eq 1 ];
    then
        if [ "$PROGRAMA" = "pip3" ];
        then
            printf "Não encontrado: python3-pip\n"
            printf "python3-pip " > "$PASTA_TEMPORARIA/LISTA_DE_DEPENDENCIAS"
        else
            printf "Não encontrado: %s\n" "$PROGRAMA"
            printf "%s " "$PROGRAMA" > "$PASTA_TEMPORARIA/LISTA_DE_DEPENDENCIAS"
        fi
        INSTALAR_DEPENDENCIAS=1
    fi
done


if [ $INSTALAR_DEPENDENCIAS -eq 1 ];
then
    DEPENDENCIAS="$(cat "$PASTA_TEMPORARIA/LISTA_DE_DEPENDENCIAS")"
    FIRST_LOOP=1
    while true;
    do
        if [ $FIRST_LOOP -eq 1 ];
        then
            printf "\n» Qual a distribuição linux do dispositivo?\n"
            printf "d: Debian/Ubuntu\n"
            printf "f: Fedora\n"
            printf "t: Android Termux\n"
            printf "n: Nenhuma das listas...\n"

            FIRST_LOOP=0
        fi
        printf "$: "
        read -r OP
        case $OP in
        [dD]* )
            apt update && apt -y install "$DEPENDENCIAS";
            break;;

        [fF]* )
            dnf install "$DEPENDENCIAS";
            break;;

        [tT]* ) 
            pkg install "$DEPENDENCIAS";
            break;;
        
        [nN]* )
            break;;
        
        * )
            printf "Você deve escolher uma das opções fornecidas... [d|f|t|n]\n";;
        esac
    done
fi

printf "\n» Instalando pacotes do python3: 'docopt' e 'colored'"
pip3 install docopt colored