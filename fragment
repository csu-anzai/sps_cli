#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""

Envia ou baixa fragmentos de dados entre a nuvem 'box' e a pasta dados/fragmentos.
Ao saírem do computador local as informações são criptografadas.
Ao chegarem da nuvem, as informações poderão ser integradas à base de dados local.

Usage:
    fragment ( send ) <arquivo>
    fragment ( get )
    fragment ( joint )

"""

import os

from python_modules.cli_sps_base import security_folder, pasta_do_usuario, fragmentos_folder
from python_modules.cli_global_config import formato_lista_fragmentos
from python_modules.py_functions_json import load_json, save_json
from docopt import docopt

args = docopt(__doc__)


def getfrags():
    os.system('cp "{}/rclone-token" "{}/.rclone.conf"'.format(security_folder, pasta_do_usuario))
    os.system('rclone copy box:/sps_fup2/fragmentos_lista/ "{}"'.format(fragmentos_folder))
    
    lista_recebidos = load_json(os.sep.join([fragmentos_folder, 'recebidos.json']))
    listas_emitidos = os.listdir(fragmentos_folder)
    fragmentos_para_baixar = []

    for l in listas_emitidos:
        if l.find('emitidos-') != 1:
            l_info = load_json(l)
            for i in l_info:
                if not i['arquivo'] in lista_recebidos:
                    fragmentos_para_baixar.append(i['arquivo'])
            os.remove("{}/{}".format(fragmentos_folder, l))

    
    for f in fragmentos_para_baixar:
        os.system('rclone copy "box:/sps_fup2/fragmentos/{}" "{}"'.format(f, fragmentos_folder))
        os.system('sps-decrypt "{}/{}"'.format(fragmentos_folder, f))
        
        if   f[0:3] == "USR": #Framgento usuários
            pass
        elif f[0:3] == "ATD": #Fragmento atendimento
            pass
        elif f[0:3] == "SEI": #Fragmento processo
            pass
        elif f[0:3] == "EST": #Fragmento estudo
            pass
        elif f[0:3] == "COR": #Fragmento correção
            pass                        

        lista_recebidos.append(f)

    save_json(lista_recebidos, os.sep.join([fragmentos_folder, 'recebidos.json']))

    os.system('rm "{}/.rclone.conf"'.format(pasta_do_usuario))

    fragfiles = os.listdir(fragmentos_folder)
    for f in fragfiles:
        if f.find('.cpt') != -1:
            


def sendfrag(arquivo):
    os.system("sps-encrypt {}".format(arquivo))
    arquivo_criptografado = arquivo + '.cpt'
    os.system('cp "{}/rclone-token" "{}/.rclone.conf"'.format(security_folder, pasta_do_usuario))
    os.system('rclone move "{}" box:/sps_fup2/fragmentos/'.format(arquivo_criptografado))
    os.system('sps-decrypt "{}"'.format(arquivo_criptografado))
    if arquivo_criptografado.find(os.sep) != -1:
        arquivo_criptografado = arquivo_criptografado.split(os.sep)[-1]
    os.system('sps-api insert -tp fragmentos/emitidos.json "arquivo::{}"'.format(arquivo_criptografado))
    os.system('cp "{fragf}/emitidos.json" "{fragf}/{emit_name}"'.format(fragf=fragmentos_folder, emit_name=formato_lista_fragmentos))
    os.system('rclone move "{fragf}/{emit_name}" box:/sps_fup2/fragmentos_lista/{emit_name}'.format(fragf=fragmentos_folder, emit_name=formato_lista_fragmentos))
    os.system('rm "{}/.rclone.conf"'.format(pasta_do_usuario))


def main():
    if args['send']:
        sendfrag(args["<arquivo>"])
    
    elif args['get']:
        getfrags()
        


if __name__ == '__main__':
    newpid = os.fork()
    if newpid == 0: #Executa comando em background...
        main()
