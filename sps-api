#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""

Adiniona, atualiza, pequisa e remove registros dos arquivos de dados.
O comando 'novo' realiza o processo de forma interativa.

Usage:
    sps-api ( insert ) [ -tp ] <arquivo_de_dados> <chave::valor>...
    sps-api ( update ) <arquivo_de_dados> <identificador> <chave::valor>...
    sps-api ( remove ) <arquivo_de_dados> <identificador> 
    sps-api ( tag-insert ) <arquivo_de_dados> <etiqueta> <identificador>...
    sps-api ( tag-replace ) <arquivo_de_dados> <valor-antigo> <valor-novo>

Options:
    -v, --version           Mostra a versão do comando
    -t, --time              Adiciona estampa de tempo
    -p, --profissional


"""


import getpass
import os

from docopt import docopt
from subprocess import getoutput
from modulos.py_sps_cli_base import timestamp, data_folder, numero_sei_mascara, numero_identificador_mascara
from modulos.py_json_handlers import save_json, load_json

args = docopt(__doc__)


def inserir_info(arquivo_de_dados, chaves_e_valores, reg_time=False, profissional=False):
    nfo={}
    if reg_time:
        nfo['timestamp'] = timestamp()
    if profissional:
        nfo['prof_atd'] = getoutput("whoami")
    for chave_e_valor in chaves_e_valores:
        chave = chave_e_valor.split("::")[0]
        valor = chave_e_valor.split("::")[1]
        nfo[chave]=valor
    arquivo_alvo = os.sep.join([data_folder, arquivo_de_dados])
    arquivo_info = load_json(arquivo_alvo)
    arquivo_info.append(nfo)
    save_json(arquivo_info, arquivo_alvo)

def remover_info(arquivo_de_dados, identificador): # Otimizar com index
    target = None
    arquivo_alvo = os.sep.join([data_folder, arquivo_de_dados])
    arquivo_info = load_json(arquivo_alvo)
    for item in arquivo_info:
        if item['identificador'] == identificador:
            target = item
            break
    arquivo_info.remove(target)
    save_json(arquivo_info, arquivo_alvo)

def atualizar_info(arquivo_de_dados, identificador, chaves_e_valores): # Otimizar com index
    target = None
    arquivo_alvo = os.sep.join([data_folder, arquivo_de_dados])
    arquivo_info = load_json(arquivo_alvo)
    for item in arquivo_info:
        if item['identificador'] == identificador:
            target = item
            break
    for chave_e_valor in chaves_e_valores:
        chave = chave_e_valor.split("::")[0]
        valor = chave_e_valor.split("::")[1]
        target[chave]=valor
    save_json(arquivo_info, arquivo_alvo)


def inserir_marcador(arquivo_de_dados, etiqueta, identificadores):
    arquivo_alvo = os.sep.join([data_folder, arquivo_de_dados])
    arquivo_info = load_json(arquivo_alvo)
    for identificador in identificadores:
        for item in arquivo_info:
            if item['identificador'] == identificador:
                try:
                    item['marcador'].append(etiqueta)
                except KeyError:
                    item['marcador'] = [etiqueta]
        save_json(arquivo_info, arquivo_alvo)



def substituir_marcadores(arquivo_de_dados, etiqueta_antiga, etiqueta_substitutiva):
    arquivo_alvo = os.sep.join([data_folder, arquivo_de_dados])
    arquivo_info = load_json(arquivo_alvo)
    for item in arquivo_info:
        if item.get('marcador'):
            if etiqueta_antiga in item['marcador']:
                item['marcador'].remove(etiqueta_antiga)
                item['marcador'].append(etiqueta_substitutiva)
                item['marcador'].sort()
    save_json(arquivo_info, arquivo_alvo)



def main():
    if args['insert']:
        inserir_info(args['<arquivo_de_dados>'], args['<chave::valor>'], args['--time'], args['--profissional'])

    elif args['remove']:
        remover_info(args['<arquivo_de_dados>'], args['<identificador>'])

    elif args['update']:
        atualizar_info(args['<arquivo_de_dados>'], args['<identificador>'], args['<chave::valor>'])

    elif args['tag-insert']:
        inserir_marcador(args['<arquivo_de_dados>'], args['<etiqueta>'], args['<identificador>'])

    elif args['tag-replace']:
        if getoutput("whoami") != 'root':
            print("Este comando só pode ser executado pelo usuário 'root'...")
        else:
            substituir_marcadores(args['<arquivo_de_dados>'], args["<valor-antigo>"], args["<valor-novo>"])

        
if __name__ == '__main__':
    main()
