#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""

Adiniona, atualiza, pequisa e remove registros dos arquivos de dados.
O comando 'novo' realiza o processo de forma interativa.

Usage:
    sps-api ( usr | usuario ) ( insert ) <publico_tipo> <identificador> <nome> <curso> <eml>
    sps-api ( usr | usuario ) ( update ) <identificador> <publico_tipo> <nome> <curso> <eml>
    sps-api ( usr | usuario ) ( search ) <identificador>
    sps-api ( usr | usuario ) ( remove ) <identificador> 
    sps-api ( tag | marcador ) ( insert ) <identificador> <etiqueta>
    sps-api ( tag | marcador ) ( update ) <valor-antigo> <valor-novo> [ <identificador> ] #Sem idt age como tgr
    sps-api ( tag | marcador ) ( search ) <etiqueta>
    sps-api ( tag | marcador ) ( remove ) <etiqueta> [ <identificador> ]
    sps-api ( atd | atendimento ) ( insert ) <identificador> <atd_t> <procedimento> <resultado>
    sps-api ( atd | atendimento ) ( update ) <identificador> <atd_t> <procedimento> <resultado> #Inserir atd_id na base de dados...
    sps-api ( atd | atendimento ) ( search ) <identificador> #Identificador aqui é matrícula
    sps-api ( atd | atendimento ) ( remove ) <identificador> #Identificador aqui é atd_id
    sps-api ( sei | processo ) ( insert ) <identificador> <assunto>
    sps-api ( sei | processo ) ( update ) <identificador> <assunto> <resposta>
    sps-api ( sei | processo ) ( search ) <identificador> #Identificador aqui é matrícula
    sps-api ( sei | processo ) ( remove ) <identificador> #Identificador aqui é o número do processo
    sps-api ( res | resposta-de-processo ) <identificador> <resposta> #Atualiza apenas o campo resposta do processo alvo.
    sps-api ( est | estudo ) ( insert ) <identificador> <args>... #Ingora valores de campo não indicados
    sps-api ( est | estudo ) ( update ) <identificador> <args>... #Cada argumento deve carregar o formato chave:valor
    sps-api ( est | estudo ) ( search ) <identificador> #Identificador aqui é matrícula
    sps-api ( est | estudo ) ( remove ) <identificador> #Identificador aqui é o código do estudo.

Options:
    --version


"""


import getpass
import os

from docopt import docopt
from subprocess import getoutput
from modulos.py_sps_cli_base import save_target_info, get_mat, timestamp, data_folder, numero_sei_mascara, numero_identificador_mascara,\
    dados_usuarios, arquivo_usuarios,\
    dados_processos, arquivo_processos,\
    dados_atendimentos, arquivo_atendimentos,\
    dados_corrigidos, arquivo_corrigidos,\
    dados_estudo_estudante, arquivo_estudo_estudante,\
    dados_estudo_familia, arquivo_estudo_familia,\
    dados_estudo_membros_familia, arquivo_estudo_membros_familia,\
    arquivo_index, automail, periodo_corrente, dados_index
    
from modulos.py_json_handlers import save_json, load_json
from modulos.py_console_tools import select_op, select_ops
from modulos.py_data_tools import render_form_get_values


args = docopt(__doc__)


matriculas = get_mat(dados_usuarios)

def inserir_info_usuario(publico_tipo, identificador, nome, curso, eml):
    nfo={}
    nfo['identificador'] = identificador
    nfo['nome'] = nome
    nfo['curso'] = curso
    nfo['publico_tipo'] = curso
    nfo['eml'] = curso
    dados_usuarios.append(nfo)
    save_json(dados_usuarios, arquivo_usuarios)

def remover_info_usuario(identificador): # Otimizar com index
    target = None
    for usr in dados_usuarios:
        if usr['identificador'] == identificador:
            target = usr
            break
    dados_usuarios.remove(target)
    save_json(dados_usuarios, arquivo_usuarios)

def atualizar_info_usuario(identificador, argz): # Otimizar com index
    target = None
    for usr in dados_usuarios:
        if usr['identificador'] == identificador:
            target = usr
            break
    dados_usuarios.remove(target)
    save_json(dados_usuarios, arquivo_usuarios)



def substituir_marcadores(antigo, novo):
    for estudante in dados_usuarios:
        if estudante.get('marcador'):
            if antigo in estudante['marcador']:
                estudante['marcador'].remove(antigo)
                estudante['marcador'].append(novo)
                estudante['marcador'].sort()
    save_json(dados_usuarios, arquivo_usuarios)


def main():
    if args['usr'] or args['usuario']:
        if args['insert']:
            inserir_info_usuario(args['<publico_tipo>'], args['<identificador>'], args['<nome>'], args['<curso>'], args['<eml>'])
        elif args['remove']:
            remover_info_usuario(args['<identificador>'])
        elif args['update']:
            atualizar_info_usuario(args['<identificador>'])


    elif args['tag'] or args['marcador']:
        pass

    elif args['tgr'] or args['nfo-tag-replace']:
        pass

    elif args['atd'] or args['atendimento']:
        pass

    elif args['sei'] or args['processo']:
        pass

    elif args['est'] or args['estudo']:
        pass

    elif args['pro'] or args['profissional']:
        pass

    elif args['dbc'] or args['campo-db']:
        pass

    elif args['dbi'] or args['inserir-form-info']:
        pass
        
if __name__ == '__main__':
    main()
