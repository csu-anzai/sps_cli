#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""

Adiniona novos registros nos arquivos de dados.

Usage:
    novo ( usr | usuario ) <identificador>
    novo ( tag | marcador ) <identificador> <etiqueta>
    novo ( tgr | nfo-tag-replace ) <valor-antigo> <valor-novo>
    novo ( atd | atendimento ) <identificador>
    novo ( nfo-atd ) <identificador> <forma_atd> <atd_t> <resultado>
    novo ( sei | processo ) <identificador> <assunto>
    novo ( res | resposta-de-processo )
    novo ( est | estudo ) <identificador>
    novo ( pro | profissional ) <uid>
    novo ( dbc | campo-db ) <arquivo_db> <coluna> [<lista-ops>] 
    novo ( dbi | inserir-form-info ) ( mesclado | aninhado ) <arquivo_db> <formulario> 
    novo ( opt | inserir-op) <coluna> <opcao> <formulario>

Options:
    --version

Observações:
    A opção <lista-ops> pode ser separada por ';' para criar um campo de múltipla escolha.
    O comando 'dbi' insere as respostas de um formulário¹ em um arquivo de dados JSON já criado.
    O comando 'opt' insere uma alternativa ao campo de multipla escolha indicado de um formulário.
    Apenas 'root' pode executar os comandos 'pro' e 'tgr'.

¹Estrutura do arquivo de formulário:
	{
		"titulo": "Registro de atendimento",
		"descricao": "Intrumental para registro de atendimentos no âmbito do SPS/FUP",
		"questoes":
		[
			{
				"enunciado": "Matrícula",
				"id": "mat",
				"tipo": "text",
			},
			{
				"enunciado": "Tipo de atendimento",
				"id": "atd_t",
				"tipo": "checkbox",
				"alternativas" :
				[
					"Informação presencial",
					"Informação via telefone",
					"Outro"²
				]            
			}
		]
	}	

²A inclusão da opção 'Outro' permite a insersão dinâmica de outros valores no formulário

"""


import getpass
import os

from docopt import docopt
from subprocess import getoutput
from modulos.py_sps_cli_base import save_target_info, get_mat, timestamp, data_folder, numero_sei_mascara,\
    form_novo_estudante, dados_estudantes, arquivo_estudantes,\
    form_processos, dados_processos, arquivo_processos,\
    form_atendiento, dados_atendimentos, arquivo_atendimentos,\
    form_corrigidos, dados_corrigidos, arquivo_corrigidos,\
    arquivo_index, automail
    
from modulos.py_console_tools_v0 import save_json, render_form_get_values, select_op, select_ops, load_json


args = docopt(__doc__)


matriculas = get_mat(dados_estudantes)

def novo_estudante(mat):
    nfo = render_form_get_values(form_novo_estudante, ['mat'])
    nfo['timestamp'] = timestamp() 
    nfo['mat'] = mat
    dados_estudantes.append(nfo)
    save_json(dados_estudantes, arquivo_estudantes)

def novo_processo(mat, assunto):
    nfo = render_form_get_values(form_processos, ['mat'])
    nfo['timestamp'] = timestamp() 
    nfo['mat'] = mat
    nfo['assunto'] = assunto
    nfo['resultado'] = ''
    nfo['numero_sei'] = numero_sei_mascara(nfo['numero_sei'])
    dados_processos.append(nfo)
    save_json(dados_processos, arquivo_processos)
    return nfo['numero_sei']

def novo_resultado_processo(processo_num):
    for proc in dados_processos:
        if proc['numero_sei'] == processo_num:
            pass
    
def novo_atendimento(mat):
    if not mat in matriculas:
        novo_estudante(mat)
        matriculas.append(mat)
        save_target_action = True
    save_target_action = False
    nfo = render_form_get_values(form_atendiento, ['mat'])
    nfo['timestamp'] = timestamp() 
    nfo['mat'] = mat
    nfo['prof_atd'] = getoutput("whoami")
    dados_atendimentos.append(nfo)
    if save_target_action == True:
        save_target_info(mat)
    save_json(dados_atendimentos, arquivo_atendimentos)
    return nfo['atd_t']

def novo_atendimento_insert(mat, forma_atd, atd_t, resultado, prof_atd=getoutput("whoami")):
    if not mat in matriculas:
        novo_estudante(mat)
        matriculas.append(mat)
        save_target_action = True
    save_target_action = False
    nfo = {}
    nfo['timestamp'] = timestamp() 
    nfo['mat'] = mat
    nfo['forma_atd'] = forma_atd
    nfo['atd_t'] = atd_t
    nfo['resultado'] = resultado
    nfo['prof_atd'] = prof_atd
    dados_atendimentos.append(nfo)
    if save_target_action == True:
        save_target_info(mat)
    save_json(dados_atendimentos, arquivo_atendimentos)
    return nfo['atd_t']


def novo_marcador(mat, marcador):
    for estudante in dados_estudantes:
        if estudante['mat'] == mat:
            try:
                estudante['marcador'].append(marcador)
            except KeyError:
                estudante['marcador'] = [marcador]
    save_json(dados_estudantes, arquivo_estudantes)

def substituir_marcadores(antigo, novo):
    for estudante in dados_estudantes:
        if estudante.get('marcador'):
            if antigo in estudante['marcador']:
                estudante['marcador'].remove(antigo)
                estudante['marcador'].append(novo)
                estudante['marcador'].sort()
    save_json(dados_estudantes, arquivo_estudantes)

def nova_correcao(mat):
    nfo = render_form_get_values(form_corrigidos, ['mat'])
    nfo['timestamp'] = timestamp() 
    nfo['mat'] = mat
    if not mat in matriculas:
        novo_estudante(mat)
        matriculas.append(mat)    
    dados_corrigidos.append(nfo)
    save_json(dados_corrigidos, arquivo_corrigidos)

def nova_coluna(nome_col, json_file, options=None):
    db_file = load_json(os.sep.join([data_folder, json_file]))
    if options != None and options.find(";") != -1:
        opz = options.split(';')
        selection = True
    else:
        opz = options
        selection = False
    for i in db_file:
        if i.get(nome_col) == None and selection == True:
            for col in i.keys():
                print(col, ' -> ', i[col])
            nova_col_nfo = select_ops(opz, 1)
            if len(nova_col_nfo) > 1:
                i[nome_col] = '; '.join(nova_col_nfo)
            else:
                i[nome_col] = nova_col_nfo[0]
        elif i.get(nome_col) == None and selection == False:
            if options == None:
                i[nome_col] = input(str(nome_col)+': ')
            else:
                i[nome_col] = opz
                save_json(db_file, os.sep.join([data_folder, json_file]))


def novo_profissional():
    profissional = input('Definir a ID de login: ')
    print('Selecione a especialidade do/a profissional: ')
    especialidade = select_op(['Assistente Social', 'Administrador', 'Administradora', 'Assistente Administrativo', 'Estatístico', 'Estatística', 'Pedagogo', 'Pedagoga', 'Psicólogo', 'Psicóloga', 'Técnico em assuntos educacionais', 'Técnica em assuntos educacionais'], 1, sort_list=True) 
    sigla_conselho = input('Qual a sigla do conselho profissional: ')
    numero_no_concelho = input('Qual a matrícula frente ao conselho profissional: ')
    matricula_instituicao = input('Qual a matrícula institucional: ')
    getoutput('adduser {}'.format(profissional))
    prof_nfo = {}
    prof_nfo['uid'] = profissional
    prof_nfo['eml'] = input('Endereço de email institucional: ')
    prof_nfo['eml_server'] = "mail.unb.br"
    prof_nfo['eml_port'] = "587"
    while True:
        prof_nfo['eml_pwd'] = getpass.getpass('Insira a senha de acesso ao email institucional: ')
        verificar_senha = getpass.getpass('Insira, novamente, a senha do email institucional: ')
        if prof_nfo['eml_pwd'] == verificar_senha:
            prof_nfo['eml_pwd'] = getoutput('echo {} | base64'.format(prof_nfo['eml_pwd']))
            break
    prof_nfo['nome'] = getoutput("getent passwd | grep %s | awk -F: ' { print $5 } ' " % profissional).split(',')[0]
    prof_nfo['cargo'] = especialidade
    prof_nfo['matricula_conselho'] = numero_no_concelho
    prof_nfo['matricula_institucional'] = matricula_instituicao
    prof_nfo['eml_assinatura'] = "Atenciosamente,\n---\n{nome}\n{cargo}\n{conselho} {matricula_conselho}\nFUB {matricula_fub}".format(nome=prof_nfo['nome'], cargo=especialidade, conselho=sigla_conselho, matricula_conselho=numero_no_concelho, matricula_fub=matricula_instituicao)
    dados_profissionais.append(prof_nfo)
    save_json(dados_profissionais, arquivo_profissionais)    

def insert_info(json_estudantes, print_fields, formulario_q_add, novo_nome_de_campo):
    #insert_info('Consultas_OldSAE.json', ['mat','Nome','Periodo','Data de Nascimento'], 'form_estudo_socioeconomico.json', 'Estudo Social e Economico')
    estudantes = load_json('./{}'.format(json_estudantes))
    novas_questoes = load_json('./forms/{}'.format(formulario_q_add))
    for e in estudantes:
        print(e)
        if e.get(novo_nome_de_campo) == None:
            limpar_tela()
            print_nfo = ""
            for f in print_fields:
                print_nfo += e[f] + os.linesep
            print(print_nfo)
            nfo = render_form_get_values(novas_questoes)
            e[novo_nome_de_campo] = nfo
            save_json(estudantes, './{}'.format(json_estudantes))


def make_index_set(set_name, target_col, dados_brutos):
    index_set = {}
    index_set['set_de_dados'] = set_name
    index_set['dados'] = {}
    for linha in dados_brutos:
        if index_set['dados'].get(linha[target_col]) == None:
            index_set['dados'][linha[target_col]] = []
        index_set['dados'][linha[target_col]].append(dados_brutos.index(linha))
    return index_set


def remake_index():
    index_db = []
    index_db.append(make_index_set('est', 'mat', dados_estudantes))
    index_db.append(make_index_set('atd', 'mat', dados_atendimentos))
    index_db.append(make_index_set('corr', 'mat', dados_corrigidos))
    index_db.append(make_index_set('proc', 'mat', dados_processos))
    index_db.append(make_index_set('proc_doc', 'numero_sei', dados_processos))
    save_json(index_db, arquivo_index)


def main():
    if args['usr'] or args['usuario']:
        pass

    elif args['tag'] or args['marcador']:
        pass

    elif args['tgr'] or args['nfo-tag-replace']:
        if getoutput("whoami") != 'root':
            print("Este comando só pode ser executado pelo usuário 'root'...")
        else:
            substituir_marcadores(args["<valor-antigo>"], args["<valor-novo>"])

    elif args['atd'] or args['atendimento']:
        save_target_info(args['<identificador>'])
        atd_t = novo_atendimento(args['<identificador>'])
        if atd_t == "Encaminhamento de pedido de auxílio emergencial":
            numero_sei = novo_processo(args['<identificador>'], atd_t)
            if automail:
                os.system("novo nfo-atd '{}' '{}' '{}' '{}'".format(args["<identificador>"], "Atendimento via e-mail", "Envio de número de processo", "Verificar status de envio de email..."))
                os.system('echo "{numero_sei}" | sendeml get "$(target get eml)" "Assistência Estudantil - Processo de Auxílio Emergencial" "Segue o número do processo para acompanhamento do resultado. Com este número você pode consultar o resultado com qualquer pessoa do SPS que possua acesso ao SEI."'.format(numero_sei=numero_sei))

        elif atd_t == "Solicitação de acesso extraordinário ao RU":
            numero_sei = novo_processo(args['<identificador>'], atd_t)
            if automail:
                os.system('echo "{numero_sei}" | sendeml get "$(target get eml)" "Assistência Estudantil - Processo de Acesso ao RU" "Segue o número do processo para que você possa acompanhar do resultado. Com este número você pode consultar o resultado junto a qualquer pessoa do SPS que possua acesso ao SEI."'.format(numero_sei=numero_sei))
                os.system("novo nfo-atd '{}' '{}' '{}' '{}'".format(args["<identificador>"], "Atendimento via e-mail", "Envio de número de processo", "Verificar status de envio de email..."))

        elif atd_t == "Recebimento/digiralização de pedido de recurso ao resultado da avaliação socioeconômica":
            numero_sei = novo_processo(args['<identificador>'], atd_t)
            if automail:
                os.system('echo "{numero_sei}" | sendeml get "$(target get eml)" "Assistência Estudantil - Processo de Recurso à Avaliação Socioeconômica" "Segue o númro do processo de recurso. Se até a data prevista para o resultado você não obtiver resposta, vá ao SPS, forneça este número e informe a pendência."'.format(numero_sei=numero_sei))
                os.system("novo nfo-atd '{}' '{}' '{}' '{}'".format(args["<identificador>"], "Atendimento via e-mail", "Envio de número de processo", "Verificar status de envio de email..."))

    elif args['nfo-atd']:
        novo_atendimento_insert(args["<identificador>"], args["<forma_atd>"], args["<atd_t>"], args["<resultado>"])

    elif args['sei'] or args['processo']:
        novo_processo(args['<identificador>'], args['<assunto>'])

    elif args['est'] or args['estudo']:
        pass

    elif args['pro'] or args['profissional']:
        if getoutput('whoami') != 'root':
            print("Apenas o usuário 'root' pode adicionar outros profissionais...")
        else:
            novo_profissional()

    elif args['dbc'] or args['campo-db']:
        nova_coluna(args['<coluna>'], args['<arquivo_db>'], args['<lista-ops>'])

    elif args['dbi'] or args['inserir-form-info']:
        pass
        
        #if args['mesclado']:
        #    pass
        #elif args['aninhado']:
        #    pass

        #nova_coluna(args['<coluna>'], args['<arquivo_db>'], args['<lista-ops>'])


if __name__ == '__main__':
    cmd = main()
    newpid = os.fork()
    if newpid == 0:
        remake_index()