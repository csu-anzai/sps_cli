#!/usr/bin/env python3
# -*- coding: utf-8 -*-

cmd_nfo="Adiniona novos registros no banco de dados"

import argparse
import getpass
import os

from subprocess import getoutput
from py_sps_cli_base import save_target_info, get_mat, timestamp, data_folder, numero_sei_mascara,\
    form_novo_estudante, dados_estudantes, arquivo_estudantes,\
    form_processos, dados_processos, arquivo_processos,\
    form_atendiento, dados_atendimentos, arquivo_atendimentos,\
    form_corrigidos, dados_corrigidos, arquivo_corrigidos,\
    arquivo_index
    
from py_console_tools_v0 import save_json, render_form_get_values, select_op, select_ops, load_json

parser = argparse.ArgumentParser(description=cmd_nfo)
parser.add_argument("action", help="utilize uma: atd|est|prof|esoc|corr|proc|db")
parser.add_argument("-m", help="especifica uma matrícula alvo.")
parser.add_argument("-a", help="especifica um assunto, utilizado apenas com a ação 'proc'.")
parser.add_argument("-M", help="defini um marcador.")
parser.add_argument("-C", help="adiciona uma coluna a um arquivo de dados.")
parser.add_argument("-f", help="especifica o arquivo de dados alvo.")
parser.add_argument("-o", help="especifica opções para serem selecionadas, separar por ';'.")
args = parser.parse_args()

matriculas = get_mat(dados_estudantes)

def novo_estudante(mat):
    nfo = render_form_get_values(form_novo_estudante, ['mat'])
    nfo['timestamp'] = timestamp() 
    nfo['mat'] = mat
    dados_estudantes.append(nfo)
    save_json(dados_estudantes, arquivo_estudantes)

def novo_processo(mat, assunto):
    nfo = render_form_get_values(form_processos, ['mat'])
    nfo['timestamp'] = timestamp() 
    nfo['mat'] = mat
    nfo['assunto'] = assunto
    nfo['resultado'] = ''
    nfo['numero_sei'] = numero_sei_mascara(nfo['numero_sei'])
    dados_processos.append(nfo)
    save_json(dados_processos, arquivo_processos)
    return nfo['numero_sei']

def novo_resultado_processo(processo_num):
    for proc in dados_processos:
        if proc['numero_sei'] == processo_num:
            pass
    
def novo_atendimento(mat):
    if not mat in matriculas:
        novo_estudante(mat)
        matriculas.append(mat)
        save_target_action = True
    save_target_action = False
    nfo = render_form_get_values(form_atendiento, ['mat'])
    nfo['timestamp'] = timestamp() 
    nfo['mat'] = mat
    dados_atendimentos.append(nfo)
    if save_target_action == True:
        save_target_info(mat)
    save_json(dados_atendimentos, arquivo_atendimentos)
    return nfo['atd_t']

def novo_marcador(mat, marcador):
    for estudante in dados_estudantes:
        if estudante['mat'] == mat:
            try:
                estudante['marcador'].append(marcador)
            except KeyError:
                estudante['marcador'] = [marcador]
    save_json(dados_estudantes, arquivo_estudantes)

def nova_correcao(mat):
    nfo = render_form_get_values(form_corrigidos, ['mat'])
    nfo['timestamp'] = timestamp() 
    nfo['mat'] = mat
    if not mat in matriculas:
        novo_estudante(mat)
        matriculas.append(mat)    
    dados_corrigidos.append(nfo)
    save_json(dados_corrigidos, arquivo_corrigidos)

def nova_coluna(nome_col, json_file, options=None):
    db_file = load_json(os.sep.join([data_folder, json_file]))
    if options != None:
        opz = options.split(';')
    for i in db_file:
        if i.get(nome_col) == None:
            for col in i.keys():
                print(col, ' -> ', i[col])
            if options == None:
                i[nome_col] = input(str(nome_col)+': ')
            else:
                nova_col_nfo = select_ops(opz, 1)
                if len(nova_col_nfo) > 1:
                    i[nome_col] = '; '.join(nova_col_nfo)
                else:
                    i[nome_col] = nova_col_nfo[0]
            save_json(db_file, os.sep.join([data_folder, json_file]))


def novo_profissional():
    profissional = input('Definir a ID de login: ')
    print('Selecione a especialidade do/a profissional: ')
    especialidade = select_op(['Assistente Social', 'Administrador', 'Administradora', 'Assistente Administrativo', 'Estatístico', 'Estatística', 'Pedagogo', 'Pedagoga', 'Psicólogo', 'Psicóloga', 'Técnico em assuntos educacionais', 'Técnica em assuntos educacionais'], 1, sort_list=True) 
    sigla_conselho = input('Qual a sigla do conselho profissional: ')
    numero_no_concelho = input('Qual a matrícula frente ao conselho profissional: ')
    matricula_instituicao = input('Qual a matrícula institucional: ')
    getoutput('adduser {}'.format(profissional))
    prof_nfo = {}
    prof_nfo['uid'] = profissional
    prof_nfo['eml'] = input('Endereço de email institucional: ')
    prof_nfo['eml_server'] = "mail.unb.br"
    prof_nfo['eml_port'] = "587"
    while True:
        prof_nfo['eml_pwd'] = getpass.getpass('Insira a senha de acesso ao email institucional: ')
        verificar_senha = getpass.getpass('Insira, novamente, a senha do email institucional: ')
        if prof_nfo['eml_pwd'] == verificar_senha:
            prof_nfo['eml_pwd'] = getoutput('echo {} | base64'.format(prof_nfo['eml_pwd']))
            break
    prof_nfo['nome'] = getoutput("getent passwd | grep %s | awk -F: ' { print $5 } ' " % profissional).split(',')[0]
    prof_nfo['cargo'] = especialidade
    prof_nfo['matricula_conselho'] = numero_no_concelho
    prof_nfo['matricula_institucional'] = matricula_instituicao
    prof_nfo['eml_assinatura'] = "Atenciosamente,\n---\n{nome}\n{cargo}\n{conselho} {matricula_conselho}\nFUB {matricula_fub}".format(nome=prof_nfo['nome'], cargo=especialidade, conselho=sigla_conselho, matricula_conselho=numero_no_concelho, matricula_fub=matricula_instituicao)
    dados_profissionais.append(prof_nfo)
    save_json(dados_profissionais, arquivo_profissionais)    


def main():
    if args.action == 'atd':
        if args.m == None:
            return "É necessário especificar um identificador com a opção '-m'."
        else:
            save_target_info(args.m)
            atd_t = novo_atendimento(args.m)
            if atd_t == "Encaminhamento de pedido de auxílio emergencial":
                numero_sei = novo_processo(args.m, atd_t)
                os.system('echo "{numero_sei}" | sendeml -d "$(get_target_nfo eml)" -a "Assistência Estudantil - Processo de Auxílio Emergencial" -m "Segue o número do processo para acompanhamento do resultado. Com este número você pode consultar o resultado com qualquer pessoa do SPS que possua acesso ao SEI."'.format(numero_sei=numero_sei))

    elif args.action == 'est':
        if args.m == None:
            return "É necessário especificar um identificador com a opção '-m'."
        else:
            novo_estudante(args.m)

    elif args.action == 'prof':
        if getoutput('whoami') != 'root':
            return "Apenas o usuário 'root' pode adcionar outros profissionais..."
        else:
            novo_profissional()

    elif args.action == 'esoc':
        pass

    elif args.action == 'db':
        if args.C == None:
            return "É necessário especificar o nome da nova coluna/campo com '-C'."
        elif args.f == None:
            return "É necessário o nome do arquivo de dados alvo com '-f'."
        else:
            nova_coluna(args.C, args.f, args.o)

    elif args.action == 'corr':
        nova_correcao(args.m)

    elif args.action == 'proc':
        if args.m == None:
            return "É necessário especificar um identificador com a opção '-m'."
        elif args.a == None:
            return "É necessário especificar um assunto com a opção '-a'."
        else:
            novo_processo(args.m, args.a)


    elif args.action == 'tag':
        if args.m == None or args.M == None:
            return "É necessário especificar um identificador com a opção '-m' e um marcador com '-M'."
        else:
            novo_marcador(args.m, args.M)


import os

def make_index_set(set_name, target_col, dados_brutos):
    index_set = {}
    index_set['set_de_dados'] = set_name
    index_set['dados'] = {}
    for linha in dados_brutos:
        if index_set['dados'].get(linha[target_col]) == None:
            index_set['dados'][linha[target_col]] = []
        index_set['dados'][linha[target_col]].append(dados_brutos.index(linha))
    return index_set



def remake_index():
    index_db = []
    index_db.append(make_index_set('est', 'mat', dados_estudantes))
    index_db.append(make_index_set('atd', 'mat', dados_atendimentos))
    index_db.append(make_index_set('corr', 'mat', dados_corrigidos))
    index_db.append(make_index_set('proc', 'mat', dados_processos))
    index_db.append(make_index_set('proc_doc', 'numero_sei', dados_processos))
    save_json(index_db, arquivo_index)


if __name__ == '__main__':
    cmd = main()
    newpid = os.fork()
    if newpid == 0:
        remake_index()


